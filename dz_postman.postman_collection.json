{
	"info": {
		"_postman_id": "baec23a0-e8d0-44c7-a363-71a9a442016e",
		"name": "dz_postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"let jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"response Name =  name\", function () {\r",
							"  pm.expect(jsondata.name).to.eql(\"John\")  \r",
							"});\r",
							"\r",
							"pm.test(\"response age =  age\", function () {\r",
							"  pm.expect(jsondata.age).to.eql(\"35\")  \r",
							"});\r",
							"\r",
							"pm.test(\"response salary =  salary\", function () {\r",
							"  pm.expect(jsondata.salary).to.eql(3500)  \r",
							"});\r",
							"\r",
							"var ReqName = request.data\r",
							"\r",
							"pm.test(\"response name = Request name\", function () {\r",
							"  pm.expect(jsondata.name).to.eql(ReqName.name) \r",
							"});\r",
							"console.log(jsondata.name)\r",
							"console.log(ReqName.name)\r",
							"console.log(typeof jsondata.name)\r",
							"console.log(typeof ReqName.name)\r",
							"\r",
							"\r",
							"pm.test(\"response age = Request age\", function () {\r",
							"  pm.expect(jsondata.age).to.eql(ReqName.age) \r",
							"});\r",
							"\r",
							"console.log(jsondata.age)\r",
							"console.log(ReqName.age)\r",
							"console.log(typeof jsondata.age)\r",
							"console.log(typeof ReqName.age)\r",
							"\r",
							"let sal = +ReqName.salary\r",
							"\r",
							"pm.test(\"response salary = Request salary\", function () {\r",
							"  pm.expect(jsondata.salary).to.eql(parseInt(request.data.salary)) \r",
							"});\r",
							"\r",
							"console.log(jsondata.salary)\r",
							"console.log(ReqName.salary)\r",
							"console.log(typeof jsondata.salary)\r",
							"console.log(typeof parseInt(request.data.salary))\r",
							"\r",
							"\r",
							"console.log(jsondata.family)\r",
							"\r",
							"pm.test(\"u_salary_1_5_year = Request salary*4\", function () {\r",
							"  pm.expect(jsondata.family.u_salary_1_5_year).to.eql(parseInt(request.data.salary*4))\r",
							"}) \r",
							"console.log(jsondata.family.u_salary_1_5_year)\r",
							"console.log(parseInt(request.data.salary*4))\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "John",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_1?name=Mark&age=23&weight=75",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Mark"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "weight",
							"value": "75"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_2?name=Peter&age=54&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Peter"
						},
						{
							"key": "age",
							"value": "54"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"let jsondata = pm.response.json()\r",
							"let reqName = pm.request.url.query.toObject().name\r",
							"let reqage = pm.request.url.query.toObject().age\r",
							"let reqsalary = pm.request.url.query.toObject().salary\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"response name = Request name\", function () {\r",
							"  pm.expect(jsondata.name).to.eql(reqName) \r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"response age = Request age\", function () {\r",
							"  pm.expect(jsondata.age).to.eql(reqage) \r",
							"});\r",
							"\r",
							"//  Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"response salary = Request salary\", function () {\r",
							"  pm.expect(jsondata.salary).to.eql(parseInt(reqsalary)) \r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log()\r",
							"\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры age.\", function () {\r",
							"pm.expect(jsondata.family.pets.dog).to.have.property(\"age\")\r",
							"})\r",
							"\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры name.\", function () {\r",
							"pm.expect(jsondata.family.pets.dog).to.have.property(\"name\")\r",
							"})\r",
							"\r",
							"pm.test(\"Проверить, что параметр name имеет значение Luky.\", function () {\r",
							"pm.expect(jsondata.family.pets.dog.name).to.eql(\"Luky\")\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что параметр age имеет значение 4\", function () {\r",
							"pm.expect(jsondata.family.pets.dog.age).to.eql(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Julia&age=26&salary=2340",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Julia"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "2340"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsondata = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let reqdata = request.data;\r",
							"\r",
							"\r",
							"let reqName = pm.request.url.query.toObject().name\r",
							"\r",
							"pm.test(\"Проверить, что name в ответе равно name s request (name забрать из request.)\", function () {\r",
							"    pm.expect(jsondata.name).to.eql(reqName)\r",
							"});\r",
							"\r",
							"let reqage = pm.request.url.query.toObject().age\r",
							"\r",
							"pm.test(\"Проверить, что age в ответе равно age s request (age забрать из request.)\", function () {\r",
							"    pm.expect(jsondata.age).to.eql(parseInt(reqage))\r",
							"});\r",
							"\r",
							"let reqsalary = pm.request.url.query.toObject().salary\r",
							"// salary из request\r",
							"console.log(reqsalary)\r",
							"\r",
							"// salary из response\r",
							"console.log(jsondata.salary)\r",
							"\r",
							"// salary [0] из response\r",
							"console.log(jsondata.salary[0])\r",
							"\r",
							"// salary [1] из response\r",
							"console.log(jsondata.salary[1])\r",
							"\r",
							"\r",
							"// salary [2] из response\r",
							"console.log(jsondata.salary[2])\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsondata.salary[0]).to.eql(parseInt(reqsalary))\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\", function () {\r",
							"pm.expect(+jsondata.salary[1]).to.eql(parseInt(reqsalary*2))\r",
							"})\r",
							"\r",
							"pm.test(\"Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\", function () {\r",
							"pm.expect(+jsondata.salary[2]).to.eql(parseInt(reqsalary*3))\r",
							"})\r",
							"\r",
							"// Передать в окружение переменную name\r",
							"\r",
							"   pm.environment.set(\"Name\", jsondata.name)\r",
							"\r",
							"   // Передать в окружение переменную age\r",
							"   pm.environment.set(\"Age\", jsondata.age)\r",
							"\r",
							"//    Передать в окружение переменную salary\r",
							"pm.environment.set(\"Salary\", jsondata.salary)\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\", function () {\r",
							" Object.keys(jsondata.salary).forEach(function(i)  {\r",
							"  console.log(i, jsondata.salary[i]);\r",
							"})});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Arhci&age=34&salary=12340",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Arhci"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "12340"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsondata = pm.response.json ();\r",
							"\r",
							"// Спарсить request.\r",
							"let reqdata1 = request.data;\r",
							"\r",
							"// pm.test(\"Проверить, что json response имеет параметр start_qa_salary\", function () {\r",
							"//     pm.response.to.have(jsondata.start_qa_salary)\r",
							"    \r",
							"// })\r",
							"\r",
							"\r",
							"pm.test(\"response имеет параметр start_qa_salary\", function () {\r",
							"    pm.expect(jsondata).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"pm.expect(jsondata).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"pm.expect(jsondata).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"pm.expect(jsondata).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"pm.expect(jsondata).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр person\", function () {\r",
							"pm.expect(jsondata).to.have.property(\"person\")\r",
							"})\r",
							"\r",
							"\r",
							"let req_start = +reqdata1.salary\r",
							"pm.test(\"Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\", function () {\r",
							"pm.expect(jsondata.start_qa_salary).to.eql(req_start)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\", function () {\r",
							"pm.expect(jsondata.qa_salary_after_6_months).to.eql(req_start*2)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\", function () {\r",
							"pm.expect(jsondata.qa_salary_after_12_months).to.eql(req_start*2.7)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\", function () {\r",
							"pm.expect(jsondata[\"qa_salary_after_1.5_year\"]).to.eql(req_start*3.3)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\", function () {\r",
							"pm.expect(jsondata[\"qa_salary_after_3.5_years\"]).to.eql(req_start*3.8)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\", function () {\r",
							"pm.expect(jsondata.person.u_name[1]).to.eql(req_start)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что что параметр u_age равен age из request (age забрать из request)\", function () {\r",
							"pm.expect(jsondata.person.u_age).to.eql(+reqdata1.age)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\", function () {\r",
							"pm.expect(jsondata.person.u_salary_5_years).to.eql(req_start*4.2)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Написать цикл который выведет в консоль по порядку элементы списка из параметра person\", function () {\r",
							" Object.keys(jsondata.person).forEach(function(i)  {\r",
							"  console.log(i, jsondata.person[i]);\r",
							"})});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{Name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{Age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "12340",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{Name}}",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{Age}}",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{Salary}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}